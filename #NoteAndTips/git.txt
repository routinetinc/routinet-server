# 参考URL: https://www.r-staffing.co.jp/engineer/entry/20190621_1
---------------------------------------------------------
//* 確認系
// リモートリポジトリのエイリアス名を確認
$ git remote
// リモートブランチを確認
$ git branch -r
// ローカルブランチを確認
$ git branch
// 直近 n コミットを表示
$ git log -n
// リモートの全ブランチのコミットログを表示
$ git fetch --all
$ git log --all --graph
// ローカルの現ブランチのコミットログを表示
$ git log --graph
// help を表示
$ git <コマンド名> --help
---------------------------------------------------------
//* ブランチ操作
$ git branch <新規作成したいブランチ名>
// リモートブランチに存在しないかつマージ済みのブランチをすべて削除する
$ git fetch -p && git branch --merged | grep -v '*' | xargs git branch -d
// リモートブランチに存在しないのブランチを (マージ済みか否かに関わらず) すべて削除する
$ git fetch -p && git branch -vv | grep ': gone]' | awk '{print $1}' | xargs git branch -D
---------------------------------------------------------
//* チェックアウト
$ git checkout <ブランチ名>
$ git checkout <コミットハッシュ> <ファイル名>
// 新しいブランチを作成してチェックアウト
$ git checkout -b <新しいブランチ名>
---------------------------------------------------------
//* ステージング
// 複数ファイル
$ git add <ファイル名 1>, <ファイル名 2>
// 全ファイル
$ git add .
---------------------------------------------------------
//* コミット
// 詳細な説明の挿入
$ git commit -m "<タイトル>" -m "詳細な説明 1 行目" -m "詳細な説明 2 行目"
// ステージング + コミット
$ git commit -all -m "<コミットメッセージ>"
---------------------------------------------------------
//* fetch (最新状態の取得) と pull (= fetch + merge)
$ git fetch
$ git pull <リモート名: origin> <ブランチ名>
// 全てのブランチを fetch ・ pull
$ git fetch --all
$ git pull --all
---------------------------------------------------------
//* push
git push <リモート名: origin> <ブランチ名>
---------------------------------------------------------
//* 特定のコミットの編集
- https://dackdive.hateblo.jp/entry/2014/09/21/122200
// HEAD: 現在のコミット. ∴ HEAD~1: 直前のコミット. 
$ git rebase -i HEAD~<戻したいコミット数+1>
- コミットログ中の修正したいコミットに対し pick を edit に変更
- 通常通りファイルを修正する
$ git commit --amend（-m "<新しいコミットメッセージ>"）
// 修正後のコミットファイルを反映
$ git rebase --continue
---------------------------------------------------------
//* コンフリクト解消手順
$ git merge master
- コンフリクト発生
- ファイルを修正
$ git add <修正ファイル>
$ git commit -m "コミットメッセージ"
---------------------------------------------------------
//* マージ時にエディターがターミナル上で開いた場合の対処法
- 適切なコミットメッセージを 1 行目に記述
- :wq (保存コマンド「:w」 + 終了コマンド「:q」) コマンドをうち、
  書き込みを保存して実行


---------------------------------------------------------
------------------------ + α ----------------------------
---------------------------------------------------------
// ステージングの取り消し (ワーキングツリーは影響を受けない)
$ git reset <ファイル名>
$ git reset  // 全ファイル
---------------------------------------------------------
//* 差分表示
// ワーキングツリー(現在)とステージングエリアの差分
$ git diff
// ステージングエリアと直前のコミットの差分
$ fit diff --staged
---------------------------------------------------------
//* ディレクトリの移動及びリネーム
$ git mv [-n] [-k] <source> <destination>
$ git mv [-n] [-k] <source> ... <destination directory>
- [-n]: 実際に実行せず結果のみを表示
- [-k]: エラー状態につながるアクションはスキップ
---------------------------------------------------------
//* スタッシュ操作
$ git stahs <新規スタッシュ名>
// 最新のスタッシュを取り出し
$ git stash pop
// 最新のスタッシュを削除
$ git stash drop
// スタッシュの番号を指定して対象のスタッシュを削除
$ git stash drop stash@{n}
// 全スタッシュ削除
$ git stash clear
---------------------------------------------------------
//* 直前のコミットを変更 (プッシュ済みの場合は使用厳禁)
$ git commit --amend
---------------------------------------------------------
//* 他のブランチの特定コミットを現在位置の次のコミットとして複製
$ git cherry-pick <commit_hash>
---------------------------------------------------------
//* 複数コミットを一つのコミットに纏める (プッシュ済みの場合は使用厳禁)
- スカッシュしたいコミットがあるブランチに切り替え
// スカッシュを開始する直前のコミットハッシュをリベース対象として指定
$ git rebase -i <commit_hash>
// 直近 3 コミットをスカッシュする場合の例
pick a1b2c3d First commit
s b2c3d4e Second commit
s c3d4e5f Third commit
// もしコンフリクトが起きたならば
- コンフリクトを解消
$ git rebase --continue
- ステージングしてコミット
---------------------------------------------------------
---------------------------------------------------------
---------------------------------------------------------